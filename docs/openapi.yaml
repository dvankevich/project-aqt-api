openapi: 3.0.3
info:
  title: AquaTrackAPI
  description: |-
    The world's best API for water metering

    Site - [https://aqua-track-front-group-five.vercel.app/](https://aqua-track-front-group-five.vercel.app/)
  version: 1.0.0
  contact: {}
servers:
- url: https://project-aqt-api.onrender.com
paths:
  /users/register:
    post:
      tags:
      - users
      summary: register
      description: register
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: wuser05@dvankevich.pp.ua
                password:
                  type: string
                  example: password
            examples:
              register:
                value:
                  email: wuser05@dvankevich.pp.ua
                  password: password
      responses:
        '201':
          description: register
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 67d476d89730a05012a0164f
                      email:
                        type: string
                        example: wuser05@dvankevich.pp.ua
                  message:
                    type: string
                    example: Successfully registered a user!
                  status:
                    type: number
                    example: 201
              examples:
                register:
                  value:
                    data:
                      _id: 67d476d89730a05012a0164f
                      email: wuser05@dvankevich.pp.ua
                    message: Successfully registered a user!
                    status: 201
        '400':
          description: register
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            context:
                              type: object
                              properties:
                                key:
                                  type: string
                                  example: password
                                label:
                                  type: string
                                  example: password
                                value:
                                  type: string
                                  example: ''
                            message:
                              type: string
                              example: '"password" is not allowed to be empty'
                            path:
                              type: array
                              items:
                                type: string
                                example: password
                              example:
                              - password
                            type:
                              type: string
                              example: string.empty
                        example:
                        - context:
                            key: password
                            label: password
                            value: ''
                          message: '"password" is not allowed to be empty'
                          path:
                          - password
                          type: string.empty
                      message:
                        type: string
                        example: Bad Request
                  message:
                    type: string
                    example: BadRequestError
                  status:
                    type: number
                    example: 400
              examples:
                register:
                  value:
                    data:
                      errors:
                      - context:
                          key: password
                          label: password
                          value: ''
                        message: '"password" is not allowed to be empty'
                        path:
                        - password
                        type: string.empty
                      message: Bad Request
                    message: BadRequestError
                    status: 400
        '409':
          description: register
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Email in use
                  message:
                    type: string
                    example: ConflictError
                  status:
                    type: number
                    example: 409
              examples:
                register:
                  value:
                    data:
                      message: Email in use
                    message: ConflictError
                    status: 409
      security:
      - {}
  /users/login:
    post:
      tags:
      - users
      summary: login
      description: login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: nonregistered@mail.com
                password:
                  type: string
                  example: Pa$$w0rd
            examples:
              login:
                value:
                  email: nonregistered@mail.com
                  password: Pa$$w0rd
      responses:
        '200':
          description: login
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: accessTokenValue
                  message:
                    type: string
                    example: Successfully logged in an user!
                  status:
                    type: number
                    example: 200
              examples:
                login:
                  value:
                    data:
                      accessToken: accessTokenValue
                    message: Successfully logged in an user!
                    status: 200
        '401':
          description: login
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                  message:
                    type: string
                    example: UnauthorizedError
                  status:
                    type: number
                    example: 401
              examples:
                login:
                  value:
                    data:
                      message: Unauthorized
                    message: UnauthorizedError
                    status: 401
        '404':
          description: login
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User not found
                  message:
                    type: string
                    example: NotFoundError
                  status:
                    type: number
                    example: 404
              examples:
                login:
                  value:
                    data:
                      message: User not found
                    message: NotFoundError
                    status: 404
      security:
      - {}
  /users/logout:
    post:
      tags:
      - users
      summary: logout
      description: logout
      operationId: logout
      requestBody:
        content:
          application/json:
            examples:
              logout:
                value: ''
      responses:
        '204':
          description: logout
          content: {}
  /users/refresh:
    post:
      tags:
      - users
      summary: refresh
      description: refresh
      operationId: refresh
      responses:
        '200':
          description: refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: accessTokenValue
                  message:
                    type: string
                    example: Successfully refreshed a session!
                  status:
                    type: number
                    example: 200
              examples:
                refresh:
                  value:
                    data:
                      accessToken: accessTokenValue
                    message: Successfully refreshed a session!
                    status: 200
        '401':
          description: refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Session not found
                  message:
                    type: string
                    example: UnauthorizedError
                  status:
                    type: number
                    example: 401
              examples:
                refresh:
                  value:
                    data:
                      message: Session not found
                    message: UnauthorizedError
                    status: 401
  /users/userinfo:
    get:
      tags:
      - users
      summary: userinfo
      description: userinfo
      operationId: userinfo
      responses:
        '200':
          description: userinfo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 67cabb8b686216dc35c58a85
                      avatarUrl:
                        type: string
                        example: https://res.cloudinary.com/dvc0lg6q7/image/upload/v1741163238/person_qyhqpa.png
                      createdAt:
                        type: string
                        example: 2025-03-07T09:25:31.211Z
                      dailyNorm:
                        type: number
                        example: 1500
                      dailySportTime:
                        type: number
                        example: 0
                      email:
                        type: string
                        example: wuser02@dvankevich.pp.ua
                      gender:
                        type: string
                        example: woman
                      updatedAt:
                        type: string
                        example: 2025-03-11T12:33:44.210Z
                      weight:
                        type: number
                        example: 0
                  message:
                    type: string
                    example: User found completely!
                  status:
                    type: number
                    example: 200
              examples:
                userinfo:
                  value:
                    data:
                      _id: 67cabb8b686216dc35c58a85
                      avatarUrl: https://res.cloudinary.com/dvc0lg6q7/image/upload/v1741163238/person_qyhqpa.png
                      createdAt: 2025-03-07T09:25:31.211Z
                      dailyNorm: 1500
                      dailySportTime: 0
                      email: wuser02@dvankevich.pp.ua
                      gender: woman
                      updatedAt: 2025-03-11T12:33:44.210Z
                      weight: 0
                    message: User found completely!
                    status: 200
    patch:
      tags:
      - users
      summary: userinfo
      description: userinfo
      operationId: userinfo1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                dailyNorm:
                  type: string
                  example: '2500'
                dailySportTime:
                  type: string
                  example: '1.5'
                email:
                  type: string
                  example: admin@dvankevich.pp.ua
                gender:
                  type: string
                  example: man
                name:
                  type: string
                  example: Dmytro
                photo:
                  type: string
                  format: binary
                weight:
                  type: string
                  example: '90'
      responses:
        '200':
          description: userinfo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 67c99a0db345235733aa25ec
                      avatarUrl:
                        type: string
                        example: https://res.cloudinary.com/dvc0lg6q7/image/upload/v1741338659/htywkrmquswyoqji9uhf.jpg
                      createdAt:
                        type: string
                        example: 2025-03-06T12:50:21.426Z
                      dailyNorm:
                        type: number
                        example: 2500
                      dailySportTime:
                        type: number
                        example: 1.5
                      email:
                        type: string
                        example: wuser02@dvankevich.pp.ua
                      gender:
                        type: string
                        example: man
                      name:
                        type: string
                        example: Dmytro
                      updatedAt:
                        type: string
                        example: 2025-03-07T09:11:00.198Z
                      weight:
                        type: number
                        example: 90
                  message:
                    type: string
                    example: Successfully patched a user!
                  status:
                    type: number
                    example: 200
              examples:
                userinfo:
                  value:
                    data:
                      _id: 67c99a0db345235733aa25ec
                      avatarUrl: https://res.cloudinary.com/dvc0lg6q7/image/upload/v1741338659/htywkrmquswyoqji9uhf.jpg
                      createdAt: 2025-03-06T12:50:21.426Z
                      dailyNorm: 2500
                      dailySportTime: 1.5
                      email: wuser02@dvankevich.pp.ua
                      gender: man
                      name: Dmytro
                      updatedAt: 2025-03-07T09:11:00.198Z
                      weight: 90
                    message: Successfully patched a user!
                    status: 200
  /users/request-reset-email:
    post:
      tags:
      - users
      summary: request-reset-email
      description: request-reset-email
      operationId: requestResetEmail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: wuser02@dvankevich.pp.ua
            examples:
              request-reset-email:
                value:
                  email: wuser02@dvankevich.pp.ua
      responses:
        '200':
          description: request-reset-email
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Reset password email was successfully sent!
                  status:
                    type: number
                    example: 200
              examples:
                request-reset-email:
                  value:
                    data: {}
                    message: Reset password email was successfully sent!
                    status: 200
      security:
      - {}
  /users/reset-password:
    post:
      tags:
      - users
      summary: reset-password
      description: reset-password
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password
                token:
                  type: string
                  example: reset password token
            examples:
              reset-password:
                value:
                  password: password
                  token: reset password token
      responses:
        '200':
          description: reset-password
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Password was successfully reset!
                  status:
                    type: number
                    example: 200
              examples:
                reset-password:
                  value:
                    data: {}
                    message: Password was successfully reset!
                    status: 200
        '401':
          description: reset-password
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: jwt expired
                  message:
                    type: string
                    example: UnauthorizedError
                  status:
                    type: number
                    example: 401
              examples:
                reset-password:
                  value:
                    data:
                      message: jwt expired
                    message: UnauthorizedError
                    status: 401
      security:
      - {}
  /users/count:
    get:
      tags:
      - users
      summary: count
      description: count
      operationId: count
      responses:
        '200':
          description: count
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      users:
                        type: number
                        example: 39
                  message:
                    type: string
                    example: Count of registered users successfully returned!
                  status:
                    type: number
                    example: 200
              examples:
                count:
                  value:
                    data:
                      users: 39
                    message: Count of registered users successfully returned!
                    status: 200
      security:
      - {}
  /water:
    post:
      tags:
      - water
      summary: addWater
      description: The `POST /water` endpoint allows you to submit water consumption data including the value, date, and time.
      operationId: addwater
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  example: 2025-03-14T20:52
                value:
                  type: number
                  example: 125
            examples:
              addWater:
                value:
                  date: 2025-03-14T20:52
                  value: 125
      responses:
        '201':
          description: addWater
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 67d47b3af1c2edbd2a2e0a66
                      createdAt:
                        type: string
                        example: 2025-03-14T18:53:46.500Z
                      date:
                        type: string
                        example: 2025-03-14T20:52
                      updatedAt:
                        type: string
                        example: 2025-03-14T18:53:46.500Z
                      userId:
                        type: string
                        example: 67cabb61686216dc35c58a82
                      value:
                        type: number
                        example: 125
                  message:
                    type: string
                    example: Sucsesfully add amount water
                  status:
                    type: number
                    example: 201
              examples:
                addWater:
                  value:
                    data:
                      _id: 67d47b3af1c2edbd2a2e0a66
                      createdAt: 2025-03-14T18:53:46.500Z
                      date: 2025-03-14T20:52
                      updatedAt: 2025-03-14T18:53:46.500Z
                      userId: 67cabb61686216dc35c58a82
                      value: 125
                    message: Sucsesfully add amount water
                    status: 201
        '401':
          description: addWater
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Access token expired
                  message:
                    type: string
                    example: UnauthorizedError
                  status:
                    type: number
                    example: 401
              examples:
                addWater:
                  value:
                    data:
                      message: Access token expired
                    message: UnauthorizedError
                    status: 401
  /water/{cardId}:
    delete:
      tags:
      - water
      summary: deleteWater
      description: Delete info about water
      operationId: deletewater
      responses:
        '204':
          description: deleteWater
          content: {}
        '400':
          description: deleteWater
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Bad Request.Invalid parameter.
                  message:
                    type: string
                    example: BadRequestError
                  status:
                    type: number
                    example: 400
              examples:
                deleteWater:
                  value:
                    data:
                      message: Bad Request.Invalid parameter.
                    message: BadRequestError
                    status: 400
        '404':
          description: deleteWater
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Card not found
                  message:
                    type: string
                    example: NotFoundError
                  status:
                    type: number
                    example: 404
              examples:
                deleteWater:
                  value:
                    data:
                      message: Card not found
                    message: NotFoundError
                    status: 404
    patch:
      tags:
      - water
      summary: updateWater
      description: Updated info about amout of water or date
      operationId: updatewater
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  example: 2025-03-08T10:20
                value:
                  type: number
                  example: 500
            examples:
              updateWater:
                value:
                  date: 2025-03-08T10:20
                  value: 500
      responses:
        '200':
          description: updateWater
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 67d03e958f39947802e7ba34
                      created_at:
                        type: string
                        example: 2025-03-11T13:45:57.761Z
                      date:
                        type: string
                        example: 2025-03-08T10:20
                      updated_at:
                        type: string
                        example: 2025-03-11T13:47:41.200Z
                      userId:
                        type: string
                        example: 67cabb8b686216dc35c58a85
                      value:
                        type: number
                        example: 500
                  message:
                    type: string
                    example: Sucsesfully updated amount water
                  status:
                    type: number
                    example: 200
              examples:
                updateWater:
                  value:
                    data:
                      _id: 67d03e958f39947802e7ba34
                      created_at: 2025-03-11T13:45:57.761Z
                      date: 2025-03-08T10:20
                      updated_at: 2025-03-11T13:47:41.200Z
                      userId: 67cabb8b686216dc35c58a85
                      value: 500
                    message: Sucsesfully updated amount water
                    status: 200
        '400':
          description: updateWater
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Bad Request.Invalid parameter.
                  message:
                    type: string
                    example: BadRequestError
                  status:
                    type: number
                    example: 400
              examples:
                updateWater:
                  value:
                    data:
                      message: Bad Request.Invalid parameter.
                    message: BadRequestError
                    status: 400
        '404':
          description: updateWater
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Card not found
                  message:
                    type: string
                    example: NotFoundError
                  status:
                    type: number
                    example: 404
              examples:
                updateWater:
                  value:
                    data:
                      message: Card not found
                    message: NotFoundError
                    status: 404
    parameters:
    - name: cardId
      in: path
      required: true
      schema:
        type: string
        example: 67cde61cbca4cefb8c9e578a
  /water/day:
    get:
      tags:
      - water
      summary: getWaterDay
      description: Get info about amout water of the day
      operationId: getwaterday
      parameters:
      - name: date
        in: query
        schema:
          type: string
          example: 2025-03-12
      responses:
        '200':
          description: getWaterDay
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 67d02dedbcb5126983f2ad47
                        created_at:
                          type: string
                          example: 2025-03-11T12:34:53.667Z
                        date:
                          type: string
                          example: 2025-03-11T11:00
                        updated_at:
                          type: string
                          example: 2025-03-11T12:34:53.667Z
                        userId:
                          type: string
                          example: 67cabb8b686216dc35c58a85
                        value:
                          type: number
                          example: 250
                    example:
                    - _id: 67d02dedbcb5126983f2ad47
                      created_at: 2025-03-11T12:34:53.667Z
                      date: 2025-03-11T11:00
                      updated_at: 2025-03-11T12:34:53.667Z
                      userId: 67cabb8b686216dc35c58a85
                      value: 250
                    - _id: 67d02dfbbcb5126983f2ad4b
                      created_at: 2025-03-11T12:35:07.241Z
                      date: 2025-03-11T12:15
                      updated_at: 2025-03-11T12:35:07.241Z
                      userId: 67cabb8b686216dc35c58a85
                      value: 250
                  message:
                    type: string
                    example: Sucsesfully found amount water of the day
                  status:
                    type: number
                    example: 200
              examples:
                getWaterDay:
                  value:
                    data:
                    - _id: 67d02dedbcb5126983f2ad47
                      created_at: 2025-03-11T12:34:53.667Z
                      date: 2025-03-11T11:00
                      updated_at: 2025-03-11T12:34:53.667Z
                      userId: 67cabb8b686216dc35c58a85
                      value: 250
                    - _id: 67d02dfbbcb5126983f2ad4b
                      created_at: 2025-03-11T12:35:07.241Z
                      date: 2025-03-11T12:15
                      updated_at: 2025-03-11T12:35:07.241Z
                      userId: 67cabb8b686216dc35c58a85
                      value: 250
                    message: Sucsesfully found amount water of the day
                    status: 200
        '401':
          description: getWaterDay
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Please provide Authorization header
                  message:
                    type: string
                    example: UnauthorizedError
                  status:
                    type: number
                    example: 401
              examples:
                getWaterDay:
                  value:
                    data:
                      message: Please provide Authorization header
                    message: UnauthorizedError
                    status: 401
  /water/month:
    get:
      tags:
      - water
      summary: getWaterMonth
      description: Get info about amout water of the month
      operationId: getwatermonth
      parameters:
      - name: month
        in: query
        schema:
          type: string
          example: 2025-03
      responses:
        '200':
          description: getWaterMonth
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      2025-03-11:
                        type: number
                        example: 500
                  message:
                    type: string
                    example: Sucsesfully found amount water of the month
                  status:
                    type: number
                    example: 200
              examples:
                getWaterMonth:
                  value:
                    data:
                      2025-03-11: 500
                    message: Sucsesfully found amount water of the month
                    status: 200
        '401':
          description: getWaterMonth
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Please provide Authorization header
                  message:
                    type: string
                    example: UnauthorizedError
                  status:
                    type: number
                    example: 401
              examples:
                getWaterMonth:
                  value:
                    data:
                      message: Please provide Authorization header
                    message: UnauthorizedError
                    status: 401
  /auth/get-oauth-url:
    get:
      tags:
      - auth
      summary: get-oauth-url
      description: get-oauth-url
      operationId: getOauthUrl
      responses:
        '200':
          description: get-oauth-url
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        example: https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&response_type=code&client_id=669721375150-oknftpr3rdkp2mvsf90830gibd98svo5.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fproject-aqt-api.onrender.com%2Fauth%2Fconfirm-oauth
                  message:
                    type: string
                    example: Successfully get Google OAuth url!
                  status:
                    type: number
                    example: 200
              examples:
                get-oauth-url:
                  value:
                    data:
                      url: https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&response_type=code&client_id=669721375150-oknftpr3rdkp2mvsf90830gibd98svo5.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fproject-aqt-api.onrender.com%2Fauth%2Fconfirm-oauth
                    message: Successfully get Google OAuth url!
                    status: 200
      security:
      - {}
  /auth/confirm-oauth:
    post:
      tags:
      - auth
      summary: confirm-oauth
      description: confirm-oauth
      operationId: confirmOauth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: ''
            examples:
              confirm-oauth:
                value:
                  code: ''
      responses:
        '200':
          description: ''
        '400':
          description: confirm-oauth
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            context:
                              type: object
                              properties:
                                key:
                                  type: string
                                  example: code
                                label:
                                  type: string
                                  example: code
                                value:
                                  type: string
                                  example: ''
                            message:
                              type: string
                              example: '"code" is not allowed to be empty'
                            path:
                              type: array
                              items:
                                type: string
                                example: code
                              example:
                              - code
                            type:
                              type: string
                              example: string.empty
                        example:
                        - context:
                            key: code
                            label: code
                            value: ''
                          message: '"code" is not allowed to be empty'
                          path:
                          - code
                          type: string.empty
                      message:
                        type: string
                        example: Bad Request
                  message:
                    type: string
                    example: BadRequestError
                  status:
                    type: number
                    example: 400
              examples:
                confirm-oauth:
                  value:
                    data:
                      errors:
                      - context:
                          key: code
                          label: code
                          value: ''
                        message: '"code" is not allowed to be empty'
                        path:
                        - code
                        type: string.empty
                      message: Bad Request
                    message: BadRequestError
                    status: 400
      security:
      - {}
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
- bearerAuth: []
tags:
- name: users
- name: water
- name: auth

