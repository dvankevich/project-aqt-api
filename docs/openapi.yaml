openapi: 3.0.3
info:
  title: AquaTrackAPI
  version: 1.0.0
  contact: {}
servers:
- url: https://project-aqt-api.onrender.com
paths:
  /users/register:
    post:
      tags:
      - users
      summary: register
      description: register
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: wuser03@dvankevich.pp.ua
                password:
                  type: string
                  example: ''
            examples:
              register:
                value:
                  email: wuser03@dvankevich.pp.ua
                  password: ''
      responses:
        '201':
          description: register
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 67cabb61686216dc35c58a82
                      avatarUrl:
                        type: string
                        example: https://res.cloudinary.com/dvc0lg6q7/image/upload/v1741163238/person_qyhqpa.png
                      createdAt:
                        type: string
                        example: 2025-03-07T09:24:49.399Z
                      dailyNorm:
                        type: number
                        example: 1500
                      dailySportTime:
                        type: number
                        example: 0
                      email:
                        type: string
                        example: wuser01@dvankevich.pp.ua
                      gender:
                        type: string
                        example: woman
                      updatedAt:
                        type: string
                        example: 2025-03-07T09:24:49.399Z
                      weight:
                        type: number
                        example: 0
                  message:
                    type: string
                    example: Successfully registered a user!
                  status:
                    type: number
                    example: 201
              examples:
                register:
                  value:
                    data:
                      _id: 67cabb61686216dc35c58a82
                      avatarUrl: https://res.cloudinary.com/dvc0lg6q7/image/upload/v1741163238/person_qyhqpa.png
                      createdAt: 2025-03-07T09:24:49.399Z
                      dailyNorm: 1500
                      dailySportTime: 0
                      email: wuser01@dvankevich.pp.ua
                      gender: woman
                      updatedAt: 2025-03-07T09:24:49.399Z
                      weight: 0
                    message: Successfully registered a user!
                    status: 201
        '400':
          description: register
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            context:
                              type: object
                              properties:
                                key:
                                  type: string
                                  example: password
                                label:
                                  type: string
                                  example: password
                                value:
                                  type: string
                                  example: ''
                            message:
                              type: string
                              example: '"password" is not allowed to be empty'
                            path:
                              type: array
                              items:
                                type: string
                                example: password
                              example:
                              - password
                            type:
                              type: string
                              example: string.empty
                        example:
                        - context:
                            key: password
                            label: password
                            value: ''
                          message: '"password" is not allowed to be empty'
                          path:
                          - password
                          type: string.empty
                      message:
                        type: string
                        example: Bad Request
                  message:
                    type: string
                    example: BadRequestError
                  status:
                    type: number
                    example: 400
              examples:
                register:
                  value:
                    data:
                      errors:
                      - context:
                          key: password
                          label: password
                          value: ''
                        message: '"password" is not allowed to be empty'
                        path:
                        - password
                        type: string.empty
                      message: Bad Request
                    message: BadRequestError
                    status: 400
        '409':
          description: register
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Email in use
                  message:
                    type: string
                    example: ConflictError
                  status:
                    type: number
                    example: 409
              examples:
                register:
                  value:
                    data:
                      message: Email in use
                    message: ConflictError
                    status: 409
  /users/login:
    post:
      tags:
      - users
      summary: login
      description: login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: dvankevich@5pro-software.ne
                password:
                  type: string
                  example: Pa$$w0rd
            examples:
              login:
                value:
                  email: dvankevich@5pro-software.ne
                  password: Pa$$w0rd
      responses:
        '200':
          description: login
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: 6CGDIC16oCtNC+OYWzgtLnyn0TFjQxNdEKxdbhcW
                  message:
                    type: string
                    example: Successfully logged in an user!
                  status:
                    type: number
                    example: 200
              examples:
                login:
                  value:
                    data:
                      accessToken: 6CGDIC16oCtNC+OYWzgtLnyn0TFjQxNdEKxdbhcW
                    message: Successfully logged in an user!
                    status: 200
        '401':
          description: login
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: Unauthorized
                  message:
                    type: string
                    example: UnauthorizedError
                  status:
                    type: number
                    example: 401
              examples:
                login:
                  value:
                    data:
                      message: Unauthorized
                    message: UnauthorizedError
                    status: 401
        '404':
          description: login
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User not found
                  message:
                    type: string
                    example: NotFoundError
                  status:
                    type: number
                    example: 404
              examples:
                login:
                  value:
                    data:
                      message: User not found
                    message: NotFoundError
                    status: 404
  /users/logout:
    post:
      tags:
      - users
      summary: logout
      description: logout
      operationId: logout
      requestBody:
        content:
          application/json:
            examples:
              logout:
                value: ''
      responses:
        '204':
          description: /auth/logout Copy
          content: {}
  /users/refresh:
    post:
      tags:
      - users
      summary: refresh
      description: refresh
      operationId: refresh
      responses:
        '200':
          description: refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: 5wNYqVB5eg0LU8JWXuSZLwy02YhRmfoTnhTLm7oC
                  message:
                    type: string
                    example: Successfully refreshed a session!
                  status:
                    type: number
                    example: 200
              examples:
                refresh:
                  value:
                    data:
                      accessToken: 5wNYqVB5eg0LU8JWXuSZLwy02YhRmfoTnhTLm7oC
                    message: Successfully refreshed a session!
                    status: 200
  /users/request-reset-email:
    post:
      tags:
      - users
      summary: request-reset-email
      description: request-reset-email
      operationId: requestResetEmail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: dvankevich@5pro-software.net
            examples:
              request-reset-email:
                value:
                  email: dvankevich@5pro-software.net
      responses:
        '200':
          description: request-reset-email
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Reset password email was successfully sent!
                  status:
                    type: number
                    example: 200
              examples:
                request-reset-email:
                  value:
                    data: {}
                    message: Reset password email was successfully sent!
                    status: 200
  /users/reset-password:
    post:
      tags:
      - users
      summary: reset-password
      description: reset-password
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password
                token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2N2M5OWEwZGIzNDUyMzU3MzNhYTI1ZWMiLCJlbWFpbCI6ImR2YW5rZXZpY2hANXByby1zb2Z0d2FyZS5uZXQiLCJpYXQiOjE3NDEzMzg4NjAsImV4cCI6MTc0MTMzOTc2MH0.G40cT05zQEe6snvjgXm4LsigglFS3yBsPJNJFDEw5Dw
            examples:
              reset-password:
                value:
                  password: password
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2N2M5OWEwZGIzNDUyMzU3MzNhYTI1ZWMiLCJlbWFpbCI6ImR2YW5rZXZpY2hANXByby1zb2Z0d2FyZS5uZXQiLCJpYXQiOjE3NDEzMzg4NjAsImV4cCI6MTc0MTMzOTc2MH0.G40cT05zQEe6snvjgXm4LsigglFS3yBsPJNJFDEw5Dw
      responses:
        '200':
          description: reset-password
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties: {}
                  message:
                    type: string
                    example: Password was successfully reset!
                  status:
                    type: number
                    example: 200
              examples:
                reset-password:
                  value:
                    data: {}
                    message: Password was successfully reset!
                    status: 200
        '401':
          description: reset-password
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        example: jwt expired
                  message:
                    type: string
                    example: UnauthorizedError
                  status:
                    type: number
                    example: 401
              examples:
                reset-password:
                  value:
                    data:
                      message: jwt expired
                    message: UnauthorizedError
                    status: 401
  /users/userinfo:
    get:
      tags:
      - users
      summary: userinfo
      description: userinfo
      operationId: userinfo
      responses:
        '200':
          description: userinfo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 67c99a0db345235733aa25ec
                      avatarUrl:
                        type: string
                        example: https://res.cloudinary.com/dvc0lg6q7/image/upload/v1741163238/person_qyhqpa.png
                      createdAt:
                        type: string
                        example: 2025-03-06T12:50:21.426Z
                      dailyNorm:
                        type: number
                        example: 2500
                      dailySportTime:
                        type: number
                        example: 2
                      email:
                        type: string
                        example: dvankevich@5pro-software.net
                      gender:
                        type: string
                        example: man
                      name:
                        type: string
                        example: Dmytro
                      updatedAt:
                        type: string
                        example: 2025-03-06T12:51:42.608Z
                      weight:
                        type: number
                        example: 0
                  message:
                    type: string
                    example: User found completely!
                  status:
                    type: number
                    example: 200
              examples:
                userinfo:
                  value:
                    data:
                      _id: 67c99a0db345235733aa25ec
                      avatarUrl: https://res.cloudinary.com/dvc0lg6q7/image/upload/v1741163238/person_qyhqpa.png
                      createdAt: 2025-03-06T12:50:21.426Z
                      dailyNorm: 2500
                      dailySportTime: 2
                      email: dvankevich@5pro-software.net
                      gender: man
                      name: Dmytro
                      updatedAt: 2025-03-06T12:51:42.608Z
                      weight: 0
                    message: User found completely!
                    status: 200
    patch:
      tags:
      - users
      summary: userinfo
      description: userinfo
      operationId: userinfo1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                dailyNorm:
                  type: string
                  example: '2500'
                dailySportTime:
                  type: string
                  example: '1.5'
                email:
                  type: string
                  example: admin@dvankevich.pp.ua
                gender:
                  type: string
                  example: man
                name:
                  type: string
                  example: Dmytro
                photo:
                  type: string
                  format: binary
                weight:
                  type: string
                  example: '90'
      responses:
        '200':
          description: userinfo
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 67c99a0db345235733aa25ec
                      avatarUrl:
                        type: string
                        example: https://res.cloudinary.com/dvc0lg6q7/image/upload/v1741338659/htywkrmquswyoqji9uhf.jpg
                      createdAt:
                        type: string
                        example: 2025-03-06T12:50:21.426Z
                      dailyNorm:
                        type: number
                        example: 2500
                      dailySportTime:
                        type: number
                        example: 1.5
                      email:
                        type: string
                        example: dvankevich@5pro-software.net
                      gender:
                        type: string
                        example: man
                      name:
                        type: string
                        example: Dmytro
                      updatedAt:
                        type: string
                        example: 2025-03-07T09:11:00.198Z
                      weight:
                        type: number
                        example: 90
                  message:
                    type: string
                    example: Successfully patched a user!
                  status:
                    type: number
                    example: 200
              examples:
                userinfo:
                  value:
                    data:
                      _id: 67c99a0db345235733aa25ec
                      avatarUrl: https://res.cloudinary.com/dvc0lg6q7/image/upload/v1741338659/htywkrmquswyoqji9uhf.jpg
                      createdAt: 2025-03-06T12:50:21.426Z
                      dailyNorm: 2500
                      dailySportTime: 1.5
                      email: dvankevich@5pro-software.net
                      gender: man
                      name: Dmytro
                      updatedAt: 2025-03-07T09:11:00.198Z
                      weight: 90
                    message: Successfully patched a user!
                    status: 200
  /water:
    post:
      tags:
      - water
      summary: addWater
      description: |-
        The `POST /water` endpoint allows you to submit water consumption data including the value, date, and time. Upon successful execution, the response will be in JSON format with a status code of 200.

        ### Response

        The response will be in the form of a JSON object with the following schema:

        ``` json
        {
            "type": "object",
            "properties": {
                "status": {
                    "type": "number"
                },
                "message": {
                    "type": "string"
                },
                "data": {
                    "type": "object",
                    "properties": {
                        "value": {
                            "type": "number"
                        },
                        "date": {
                            "type": "string"
                        },
                        "userId": {
                            "type": "string"
                        },
                        "_id": {
                            "type": "string"
                        },
                        "created_at": {
                            "type": "string"
                        },
                        "updated_at": {
                            "type": "string"
                        }
                    }
                }
            }
        }

         ```
      operationId: addwater
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  example: 2025-03-09T32:78
                value:
                  type: number
                  example: 250
            examples:
              addWater:
                value:
                  date: 2025-03-09T32:78
                  value: 250
      responses:
        '200':
          description: ''
  /water/{cardId}:
    delete:
      tags:
      - water
      summary: deleteWater
      description: Delete info about water
      operationId: deletewater
      responses:
        '200':
          description: ''
    patch:
      tags:
      - water
      summary: updateWater
      description: Updated info about amout of water or date
      operationId: updatewater
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  example: 2025-03-08T10:20
                value:
                  type: number
                  example: 500
            examples:
              updateWater:
                value:
                  date: 2025-03-08T10:20
                  value: 500
      responses:
        '200':
          description: ''
    parameters:
    - name: cardId
      in: path
      required: true
      schema:
        type: string
        example: 67cdb43fdf3cb45e2d566f06
  /water/day:
    get:
      tags:
      - water
      summary: getWaterDay
      description: Get info about amout water of the day
      operationId: getwaterday
      parameters:
      - name: date
        in: query
        schema:
          type: string
          example: 2025-03-01
      responses:
        '200':
          description: ''
  /water/month:
    get:
      tags:
      - water
      summary: getWaterMonth
      description: Get info about amout water of the month
      operationId: getwatermonth
      parameters:
      - name: month
        in: query
        schema:
          type: string
          example: 2025-03
      responses:
        '200':
          description: ''
  /auth/get-oauth-url:
    get:
      tags:
      - auth
      summary: get-oauth-url
      description: get-oauth-url
      operationId: getOauthUrl
      responses:
        '200':
          description: get-oauth-url
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        example: https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&response_type=code&client_id=669721375150-oknftpr3rdkp2mvsf90830gibd98svo5.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fproject-aqt-api.onrender.com%2Fconfirm-google-auth
                  message:
                    type: string
                    example: Successfully get Google OAuth url!
                  status:
                    type: number
                    example: 200
              examples:
                get-oauth-url:
                  value:
                    data:
                      url: https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&response_type=code&client_id=669721375150-oknftpr3rdkp2mvsf90830gibd98svo5.apps.googleusercontent.com&redirect_uri=https%3A%2F%2Fproject-aqt-api.onrender.com%2Fconfirm-google-auth
                    message: Successfully get Google OAuth url!
                    status: 200
  /auth/confirm-oauth:
    post:
      tags:
      - auth
      summary: confirm-oauth
      description: confirm-oauth
      operationId: confirmOauth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: ''
            examples:
              confirm-oauth:
                value:
                  code: ''
      responses:
        '200':
          description: ''
        '400':
          description: confirm-oauth
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            context:
                              type: object
                              properties:
                                key:
                                  type: string
                                  example: code
                                label:
                                  type: string
                                  example: code
                                value:
                                  type: string
                                  example: ''
                            message:
                              type: string
                              example: '"code" is not allowed to be empty'
                            path:
                              type: array
                              items:
                                type: string
                                example: code
                              example:
                              - code
                            type:
                              type: string
                              example: string.empty
                        example:
                        - context:
                            key: code
                            label: code
                            value: ''
                          message: '"code" is not allowed to be empty'
                          path:
                          - code
                          type: string.empty
                      message:
                        type: string
                        example: Bad Request
                  message:
                    type: string
                    example: BadRequestError
                  status:
                    type: number
                    example: 400
              examples:
                confirm-oauth:
                  value:
                    data:
                      errors:
                      - context:
                          key: code
                          label: code
                          value: ''
                        message: '"code" is not allowed to be empty'
                        path:
                        - code
                        type: string.empty
                      message: Bad Request
                    message: BadRequestError
                    status: 400
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
- bearerAuth: []
tags:
- name: users
- name: water
- name: auth

